fuel_type == "petrol_91" ~ price_91 * fuel_consumption,
fuel_type == "petrol_95" ~ price_95 * fuel_consumption,
fuel_type == "petrol_98" ~ price_98 * fuel_consumption,
fuel_type == "diesel" ~ price_diesel * fuel_consumption)) %>%
select(year, test_cost),
expected = benefit %>%
rename("test_cost" = fuel_cost) %>%
select(year, test_cost))
})
#Checking that the calculations are working properly for fuel
test_that("Overall running costs calculated correctly", {
#Checking the fuel consumption totals are accurate
expect_identical(
object = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
mutate(test_consumption = case_when(
fuel_type %in% c("petrol_91", "petrol_95", "petrol_98") ~ petrol_co2_to_fuel(current_emissions * gap) * km_driven / 100,
fuel_type == "diesel" ~ diesel_co2_to_fuel(current_emissions * gap) * km_driven / 100),
test_consumption = round(test_consumption, digits = 0)) %>%
select(year, test_consumption),
expected = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
select(year, fuel_consumption) %>%
mutate(fuel_consumption = round(fuel_consumption, digits = 0)) %>%
rename("test_consumption" = fuel_consumption))
# Checking the fuel price is correct
expect_identical(
object = benefit %>%
mutate(test_cost = case_when(
fuel_type == "electric" ~ energy_price * energy_consumption * km_driven,
fuel_type == "petrol_91" ~ price_91 * fuel_consumption,
fuel_type == "petrol_95" ~ price_95 * fuel_consumption,
fuel_type == "petrol_98" ~ price_98 * fuel_consumption,
fuel_type == "diesel" ~ price_diesel * fuel_consumption)) %>%
select(year, test_cost),
expected = benefit %>%
rename("test_cost" = fuel_cost) %>%
select(year, test_cost))
})
?benefit_model
energy_intensity
182.5169*13671.54
load_all()
fleet_eff_sim()
tribble(
~fuel_type, ~proportion,
"petrol_95", premium_95,
"petrol_98", premium_98
))
tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
))
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
))
inner_join(values, proportions)
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
inner_join(values, proportions)
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98
)
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
inner_join(values, proportions) %>%
mutate(equivalent = between(
object = proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
object = proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
?between
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired + 0.2,
proportion_desired - 0.2
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
))
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
all(equivalent)
)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
all(equivalent)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
all()
?all
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent)
a <-  inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent)
all(a)
class(a)
?as_vector
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
as_vector() %>%
all()
expect_true(
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
as_vector() %>%
all()
)
#Checking the proportions of vehicle by fuel type are right
#THIS TEST CURRENTLY DOESN'T WORK AND IS BROKEN
test_that("Checking fuel type proportions are correct", {
#fuel_type_proportion <- function(data = benefit, vehicle) {
fuel_proportions <- benefit %>%
filter(vehicle_group == "passenger",
fuel_type != "electric",
vehicle_age == 0) %>%
mutate(count = 1) %>%
group_by(fuel_type) %>%
summarise(proportion = sum(count)) %>%
ungroup() %>%
mutate(proportion = proportion / sum(proportion))
#checking petrol vehicles first
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
petrol_values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98)
#checking all within 5% of intended
expect_true(
inner_join(petrol_values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05)) %>%
select(equivalent) %>%
as_vector() %>%
all()
)
#map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
# filename
# by Lachlan Fox, Grattan Institute
# SET UP =======================================================================
# Packages ---------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(scales)
library(purrr)
library(glue)
library(fst)
library(janitor)
library(grattantheme)
library(spatstat)
library(ggtext)
library(zoo)
library(readxl)
# Project functions ------------------------------------------------------------
`%nin%` <- Negate(`%in%`)
# READ DATA  ===================================================================
# CLEAN and ANALYSE ============================================================
# PLOTS ========================================================================
library(devtools)
check()
# Generate objects to test -----------------------------------------------------
comp_default <- compliance_costs(
.run_to_year = 2027,
.fleet = fleet_creator(),
.target_scenario = "target_central")
if (rewrite_compare_objects) {
readr::write_rds(comp_default, "tests/testthat/data/compliance-default-original.rds")
}
comp_long <- compliance_costs(
.penalty_begin = 2024,
.run_to_year = 2050,
.fleet = fleet_creator(.i_cars = 10),
.target_scenario = "target_central")
load_all()
comp_default <- compliance_costs(
.run_to_year = 2027,
.fleet = fleet_creator(),
.target_scenario = "target_central")
if (rewrite_compare_objects) {
readr::write_rds(comp_default, "tests/testthat/data/compliance-default-original.rds")
}
comp_long <- compliance_costs(
.penalty_begin = 2024,
.run_to_year = 2050,
.fleet = fleet_creator(.i_cars = 10),
.target_scenario = "target_central")
fleet_eff_sim()
# Run tests  -------------------------------------------------------------------
test_that("Compliance cost outputs have not changed", {
expect_identical(comp_default,
readr::read_rds("data/compliance-default-original.rds"))
})
# filename
# by Lachlan Fox, Grattan Institute
# SET UP =======================================================================
# Packages ---------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(scales)
library(purrr)
library(glue)
library(fst)
library(janitor)
library(grattantheme)
library(spatstat)
library(ggtext)
library(zoo)
library(readxl)
# Project functions ------------------------------------------------------------
`%nin%` <- Negate(`%in%`)
# READ DATA  ===================================================================
# CLEAN and ANALYSE ============================================================
# PLOTS ========================================================================
library(devtools)
load_all()
targets_and_bau
# 01-fuel-forecasts
# by Lachlan Fox, Grattan Institute
#This script produces a future fuel price scenario for use in the fleetEffSim model
# Setup ------------------------------------------------------------------------
source("data-raw/model_data/00-setup.R")
#fuel price forecast -----------------------------------------------------------
#the price forecasts are developed from a range of sources.
#Australian institute of Petroleum data is used for historical data
#https://www.aip.com.au/aip-annual-retail-price-data
#this shows that real prices have basically been flat for the past 10 years.
#resultingly, our central estimate is no change to petrol prices.
#our 'low-price' fuel scenario is -1% change annually from 2019 rates
#(i.e. 0.77 in 2035 and $0.66 in 2050)
#our 'high-price' scenario is 1% change annually from 2019 rates.
#i.e. ~ $1.1 in 2035 compared to 0.9 today, and $1.25 in 2050
#this data was corrected to remove taxes applied to fuel to provide the before tax prices.
#tax data was obtained from here: https://data.gov.au/data/dataset/excise-data/resource/b9227cdf-4c04-492d-bd84-65031adc408e
#we have used 2019 as our base year given 2020 is an anomaly due to covid and 2021 data
#is incomplete/less accessible
#we have used an RACV report data: https://www.racv.com.au/royalauto/moving/news-information/premium-petrol-guzzling-cash.html
#to get a price comparison between the different fuel types. This % difference was assumed
#to remain constant in all years and all scenarios.
#the historical data, adjusted for inflation and stripped of taxes
#this shows that prices have declined since ~2007
historical_prices <- read_xlsx("data-raw/external_data/aip/AIP_Annual_Retail_Price_Data.xlsx",
sheet = "adjusted-historical") %>%
pivot_longer(cols = (2:3),
names_to = "fuel",
values_to = "prices")
historical_prices %>%
filter(year != 2020) %>%
ggplot(aes(x = year, y = prices, colour = fuel)) +
geom_point() +
geom_line(aes(colour = fuel)) +
geom_smooth(aes(colour = fuel), method = "lm") +
scale_y_continuous_grattan(limits = c(0, 1.5))
#however, looking at the longer term picture, prices are mostly flat over the past ~20 years.
#ie. page 2 (page 6 of pdf). As a result, our central scenario assumes rices remain flat
#https://www.accc.gov.au/system/files/20-27RPT_Petrol%2520Quarterly%2520Report%2520-%2520June%25202020_FA.pdf
fuel_forecasts <- read_xlsx("data-raw/external_data/aip/AIP_Annual_Retail_Price_Data.xlsx",
sheet = "petrol-forecasts") %>%
#in order to get our residual values beyond 2050 we're going to freeze prices at
#2050 levels and extend these to 2050
group_by(scenario) %>%
complete(year = (2051:2060)) %>%
arrange(scenario, year) %>%
#and filling our missing values
na.locf() %>%
pivot_longer(cols = (3:6),
names_to = "fuel_type",
values_to = "price")
View(fuel_forecasts)
# 01-fuel-forecasts
# by Lachlan Fox, Grattan Institute
#This script produces a future fuel price scenario for use in the fleetEffSim model
# Setup ------------------------------------------------------------------------
source("data-raw/model_data/00-setup.R")
#fuel price forecast -----------------------------------------------------------
#the price forecasts are developed from a range of sources.
#Australian institute of Petroleum data is used for historical data
#https://www.aip.com.au/aip-annual-retail-price-data
#this shows that real prices have basically been flat for the past 10 years.
#resultingly, our central estimate is no change to petrol prices.
#our 'low-price' fuel scenario is -1% change annually from 2019 rates
#(i.e. 0.77 in 2035 and $0.66 in 2050)
#our 'high-price' scenario is 1% change annually from 2019 rates.
#i.e. ~ $1.1 in 2035 compared to 0.9 today, and $1.25 in 2050
#this data was corrected to remove taxes applied to fuel to provide the before tax prices.
#tax data was obtained from here: https://data.gov.au/data/dataset/excise-data/resource/b9227cdf-4c04-492d-bd84-65031adc408e
#we have used 2019 as our base year given 2020 is an anomaly due to covid and 2021 data
#is incomplete/less accessible
#we have used an RACV report data: https://www.racv.com.au/royalauto/moving/news-information/premium-petrol-guzzling-cash.html
#to get a price comparison between the different fuel types. This % difference was assumed
#to remain constant in all years and all scenarios.
#the historical data, adjusted for inflation and stripped of taxes
#this shows that prices have declined since ~2007
historical_prices <- read_xlsx("data-raw/external_data/aip/AIP_Annual_Retail_Price_Data.xlsx",
sheet = "adjusted-historical") %>%
pivot_longer(cols = (2:3),
names_to = "fuel",
values_to = "prices")
historical_prices %>%
filter(year != 2020) %>%
ggplot(aes(x = year, y = prices, colour = fuel)) +
geom_point() +
geom_line(aes(colour = fuel)) +
geom_smooth(aes(colour = fuel), method = "lm") +
scale_y_continuous_grattan(limits = c(0, 1.5))
#however, looking at the longer term picture, prices are mostly flat over the past ~20 years.
#ie. page 2 (page 6 of pdf). As a result, our central scenario assumes rices remain flat
#https://www.accc.gov.au/system/files/20-27RPT_Petrol%2520Quarterly%2520Report%2520-%2520June%25202020_FA.pdf
fuel_forecasts <- read_xlsx("data-raw/external_data/aip/AIP_Annual_Retail_Price_Data.xlsx",
sheet = "petrol-forecasts") %>%
#in order to get our residual values beyond 2050 we're going to freeze prices at
#2050 levels and extend these to 2050
group_by(scenario) %>%
complete(year = (2051:2060)) %>%
arrange(scenario, year) %>%
#and filling our missing values
na.locf() %>%
pivot_longer(cols = (3:6),
names_to = "fuel_type",
values_to = "price")
#however, one things that is not factored into this above data is that fuel prices are expected
#to rise by approxiamtely 1c/L following the introduction of stricter fuel quality parameters:
#https://www.industry.gov.au/sites/default/files/2020-07/better-fuel-cleaner-air-ris.pdf page 26
#we will factor that in as well.
fuel_forecasts <- fuel_forecasts %>%
mutate(price = price + 0.01)
write_rds(fuel_forecasts, "data-raw/model_data/final-data/fuel-forecasts.rds")
#script to import all required data for model
library(readr)
library(readxl)
#data for the cost model
cost_curves <- read_rds("data-raw/model_data/final-data/cost_curves.rds")
targets_and_bau <- read_rds("data-raw/model_data/final-data/targets_and_bau.rds")
fuel_prices <- read_rds("data-raw/model_data/final-data/fuel-forecasts.rds")
electricity_prices <- read_rds("data-raw/model_data/final-data/energy_price_forecast.rds")
energy_consumption <- read_rds("data-raw/model_data/final-data/ev_energy_consumption.rds")
energy_intensity <- read_rds("data-raw/model_data/final-data/energy_intensity.rds")
km_travelled <- read_rds("data-raw/model_data/final-data/km_traveled.rds")
fleet <- fleet_creator(.i_cars = 100)
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
newa <- fleet_eff_sim()
library(devtools)
load_all()
newa <- fleet_eff_sim()
View(newa)
0.25*0 + 0.25*0.9*100+0.5*0.8*100
0.25*0 + 0.25*0.9*100+0.5*0.9*100
0.25*0 + 0.25*0.9*100+0.5*0.2*100
0.25*0 + 0.25*0.9*100+0.5*0.1*100
