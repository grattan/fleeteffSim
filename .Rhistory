)
fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
km_travelled
# That the km drive match up based on vehicle type and
test_that("Vehicle km driven properly assigned", {
for (i in 1:5) {
#I know this should probably be done with map but i'll learn it a bit later
for (j in c("passenger", "lcv", "suv")) {
#randomnly sampling over ages 1 - 18
age <- sample(1:18, 1)
expect_equal(
object = benefit %>%
#first we need to reverse engineer to get rid of the rebound factor,
#so that we can compare with the base dataset
select(km_driven, rebound_factor, vehicle_age,
vehicle_group) %>%
mutate(km_travelled = (km_driven / rebound_factor) * 100) %>%
select(vehicle_age, vehicle_group, km_travelled) %>%
filter(vehicle_age == age, vehicle_group == j) %>%
#to make to sure there's no duplicates - they should all be the same anyhow
mutate(km_travelled = round(km_travelled, digits = 0)) %>%
head(1) %>%
pull(km_travelled),
expected = km_travelled %>%
rename("vehicle_age" = age) %>%
filter(vehicle_age == age, vehicle_type == j) %>%
pull(km_travelled) %>%
round(digits = 0))
}
}
})
fuel_prices
energy_consumption
electricity_prices
#Now checking vehicle energy consumption and energy prices
test_that("Energy consumption and price data is accurate", {
energy <- inner_join(energy_consumption, electricity_prices) %>%
filter(scenario == "central") %>%
mutate(test_value = energy_consumption * energy_price)
benefit_energy <- benefit %>%
select(year, energy_price, energy_consumption, vehicle_group) %>%
unique() %>%
mutate(test_value = energy_consumption * energy_price)
for (i in 1:5) {
test_year <- sample(2025:2050, 1)
#I know this should probably be done with map but I'll learn it a bit later
for (j in c("passenger", "lcv", "suv")) {
expect_equal(
object = benefit_energy %>%
filter(year == test_year,
vehicle_group == j) %>%
pull(test_value) %>%
round(digits = 3),
expected = energy %>%
filter(year == test_year,
vehicle_type == j) %>%
pull(test_value) %>%
round(digits = 3))
}
}
})
petrol_co2_to_fuel()
petrol_co2_to_fuel(180)
#Checking that the calculations are working properly for fuel
test_that("Overall running costs calculated correctly", {
#Checking the fuel consumption totals are accurate
expect_identical(
object = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
mutate(test_consumption = case_when(
fuel_type %in% c("petrol_91", "petrol_95", "petrol_98") ~ petrol_co2_to_fuel(current_emissions * gap) * km_driven / 100,
fuel_type == "diesel" ~ diesel_co2_to_fuel(current_emissions * gap) * km_driven / 100),
test_consumption = round(test_consumption, digits = 0)) %>%
select(year, test_consumption),
expected = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
select(year, fuel_consumption) %>%
mutate(fuel_consumption = round(fuel_consumption, digits = 0)) %>%
rename("test_consumption" = fuel_consumption))
# Checking the fuel price is correct
expect_equal(
object = benefit %>%
mutate(test_cost = case_when(
fuel_type == "electric" ~ energy_price * energy_consumption * km_driven,
fuel_type == "petrol_91" ~ price_91 * fuel_consumption,
fuel_type == "petrol_95" ~ price_95 * fuel_consumption,
fuel_type == "petrol_98" ~ price_98 * fuel_consumption,
fuel_type == "diesel" ~ price_diesel * fuel_consumption)) %>%
select(year, test_cost),
expected = benefit %>%
rename("test_cost" = fuel_cost) %>%
select(year, test_cost))
})
#Checking that the calculations are working properly for fuel
test_that("Overall running costs calculated correctly", {
#Checking the fuel consumption totals are accurate
expect_identical(
object = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
mutate(test_consumption = case_when(
fuel_type %in% c("petrol_91", "petrol_95", "petrol_98") ~ petrol_co2_to_fuel(current_emissions * gap) * km_driven / 100,
fuel_type == "diesel" ~ diesel_co2_to_fuel(current_emissions * gap) * km_driven / 100),
test_consumption = round(test_consumption, digits = 0)) %>%
select(year, test_consumption),
expected = benefit %>%
filter(fuel_type != "electric", vehicle_age <= 17) %>%
select(year, fuel_consumption) %>%
mutate(fuel_consumption = round(fuel_consumption, digits = 0)) %>%
rename("test_consumption" = fuel_consumption))
# Checking the fuel price is correct
expect_identical(
object = benefit %>%
mutate(test_cost = case_when(
fuel_type == "electric" ~ energy_price * energy_consumption * km_driven,
fuel_type == "petrol_91" ~ price_91 * fuel_consumption,
fuel_type == "petrol_95" ~ price_95 * fuel_consumption,
fuel_type == "petrol_98" ~ price_98 * fuel_consumption,
fuel_type == "diesel" ~ price_diesel * fuel_consumption)) %>%
select(year, test_cost),
expected = benefit %>%
rename("test_cost" = fuel_cost) %>%
select(year, test_cost))
})
?benefit_model
energy_intensity
182.5169*13671.54
load_all()
fleet_eff_sim()
tribble(
~fuel_type, ~proportion,
"petrol_95", premium_95,
"petrol_98", premium_98
))
tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
))
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
))
inner_join(values, proportions)
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95")),
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
expect_equal(#diesel_stuff)
)}
map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
inner_join(values, proportions)
values <- tribble(
~fuel_type, ~proportion_actual,
"petrol_95", premium_95,
"petrol_98", premium_98
)
inner_join(values, proportions)
values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98
)
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
inner_join(values, proportions) %>%
mutate(equivalent = between(
object = proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
object = proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired + 0.05,
proportion_desired - 0.05
))
?between
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired + 0.2,
proportion_desired - 0.2
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
))
#checking petrol vehicles first
#how do I make it so that they're +/- ~5%????
expect_true(
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
all(equivalent)
)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
all(equivalent)
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
))
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
all()
?all
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent)
a <-  inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent)
all(a)
class(a)
?as_vector
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
as_vector() %>%
all()
expect_true(
inner_join(values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05
)) %>%
select(equivalent) %>%
as_vector() %>%
all()
)
#Checking the proportions of vehicle by fuel type are right
#THIS TEST CURRENTLY DOESN'T WORK AND IS BROKEN
test_that("Checking fuel type proportions are correct", {
#fuel_type_proportion <- function(data = benefit, vehicle) {
fuel_proportions <- benefit %>%
filter(vehicle_group == "passenger",
fuel_type != "electric",
vehicle_age == 0) %>%
mutate(count = 1) %>%
group_by(fuel_type) %>%
summarise(proportion = sum(count)) %>%
ungroup() %>%
mutate(proportion = proportion / sum(proportion))
#checking petrol vehicles first
proportions <- fuel_proportions %>%
filter(fuel_type %in% c("petrol_98", "petrol_95"))
petrol_values <- tribble(
~fuel_type, ~proportion_desired,
"petrol_95", premium_95,
"petrol_98", premium_98)
#checking all within 5% of intended
expect_true(
inner_join(petrol_values, proportions) %>%
rowwise() %>%
mutate(equivalent = between(
proportion,
proportion_desired - 0.05,
proportion_desired + 0.05)) %>%
select(equivalent) %>%
as_vector() %>%
all()
)
#map_dfc(fuel_type_proportion, c("passenger", "lcv", "suv"))
})
# filename
# by Lachlan Fox, Grattan Institute
# SET UP =======================================================================
# Packages ---------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(scales)
library(purrr)
library(glue)
library(fst)
library(janitor)
library(grattantheme)
library(spatstat)
library(ggtext)
library(zoo)
library(readxl)
# Project functions ------------------------------------------------------------
`%nin%` <- Negate(`%in%`)
# READ DATA  ===================================================================
# CLEAN and ANALYSE ============================================================
# PLOTS ========================================================================
library(devtools)
check()
# Generate objects to test -----------------------------------------------------
comp_default <- compliance_costs(
.run_to_year = 2027,
.fleet = fleet_creator(),
.target_scenario = "target_central")
if (rewrite_compare_objects) {
readr::write_rds(comp_default, "tests/testthat/data/compliance-default-original.rds")
}
comp_long <- compliance_costs(
.penalty_begin = 2024,
.run_to_year = 2050,
.fleet = fleet_creator(.i_cars = 10),
.target_scenario = "target_central")
load_all()
comp_default <- compliance_costs(
.run_to_year = 2027,
.fleet = fleet_creator(),
.target_scenario = "target_central")
if (rewrite_compare_objects) {
readr::write_rds(comp_default, "tests/testthat/data/compliance-default-original.rds")
}
comp_long <- compliance_costs(
.penalty_begin = 2024,
.run_to_year = 2050,
.fleet = fleet_creator(.i_cars = 10),
.target_scenario = "target_central")
fleet_eff_sim()
# Run tests  -------------------------------------------------------------------
test_that("Compliance cost outputs have not changed", {
expect_identical(comp_default,
readr::read_rds("data/compliance-default-original.rds"))
})
# filename
# by Lachlan Fox, Grattan Institute
# SET UP =======================================================================
# Packages ---------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(scales)
library(purrr)
library(glue)
library(fst)
library(janitor)
library(grattantheme)
library(spatstat)
library(ggtext)
library(zoo)
library(readxl)
# Project functions ------------------------------------------------------------
`%nin%` <- Negate(`%in%`)
# READ DATA  ===================================================================
# CLEAN and ANALYSE ============================================================
# PLOTS ========================================================================
library(devtools)
load_all()
targets_and_bau
source("data-raw/model_data/00-setup.R")
# Read data: AEMO ----------------------------------------------------------------
#We are going to assume the 'step change' AEMO scenario is used. This has also been linearly
#interpolated to reach assumed net 0 by 2050 (calculations in spreadsheet)
energy_intensity <- read_xlsx("data-raw/external_data/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names() %>%
select(-old) %>%
complete(year = (2051:2060)) %>%
arrange(year) %>%
na.locf()
library(devtools)
energy_intensity
energy_intensity <- read_xlsx("data-raw/external_data/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names() %>%
select(-old) %>%
complete(year = (2051:2060)) %>%
arrange(year) %>%
na.locf()
View(energy_intensity)
energy_intensity <- read_xlsx("data-raw/external_data/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names() %>%
select(-old, step_change) %>%
complete(year = (2051:2060)) %>%
arrange(year) %>%
na.locf()
View(energy_intensity)
write_rds(energy_intensity, "data-raw/model_data/final-data/energy_intensity.rds")
#script to import all required data for model
library(readr)
library(readxl)
#data for the cost model
cost_curves <- read_rds("data-raw/model_data/final-data/cost_curves.rds")
targets_and_bau <- read_rds("data-raw/model_data/final-data/targets_and_bau.rds")
fuel_prices <- read_rds("data-raw/model_data/final-data/fuel-forecasts.rds")
electricity_prices <- read_rds("data-raw/model_data/final-data/energy_price_forecast.rds")
energy_consumption <- read_rds("data-raw/model_data/final-data/ev_energy_consumption.rds")
energy_intensity <- read_rds("data-raw/model_data/final-data/energy_intensity.rds")
km_travelled <- read_rds("data-raw/model_data/final-data/km_traveled.rds")
fleet <- fleet_creator(.i_cars = 100)
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
new <- fleet_eff_sim()
load_all()
new <- fleet_eff_sim()
new %>% view()
