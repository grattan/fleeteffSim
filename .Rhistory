check()
usethis::use_data(test_cc, test_fleet, internal = TRUE)
#importing dummy data for tests, generated in the R script "test_data_upgrade_selector.R"
test_that("Upgrade selector selects the most cost effective upgrade from dummy data", {
expect_equal(
#Using the dummy data we've imported above, we expect the result of the test
#to say that the vehicle with ID 3 is the vehicle that the upgrade should be
#applied to (as we created the dummy data to show this)
select_upgrade(.this_year_fleet = test_fleet,
.this_year_curves = test_cc) %>%
ungroup() %>%
select(id),
test_fleet %>%
filter(id == 3) %>%
select(id))
})
#NEED TO WRITE A TEST THAT MAKES SURE THAT WHEN THE COSTS ARE THE SAME, ELECTRIC UPGRADE
#IS FIRST APPLIED TO PASSENGER VEHICLES, THEN SUVS, THEN LCVS.
#likewise should write a test that points out a warning or something if vehicles in the
#same group have different emissions
check()
use_package("data.table")
check()
check()
use_package()
?use_package()
roxygen2::roxygenise()
roxygen2::roxygenise()
check()
check()
usethis::use_pipe()
?tibble
?slice_min
check()
?case_when
pivot_wider()
?pivot_wider
?arrange
?row_number
?complete
check()
check()
check()
?uncount
?count
check()
check()
check()
?rename
check()
check()
check()
check()
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds")
?read_rds
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
View(targets)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
View(targets)
inner_join(bau, targets)
View(bau)
View(bau)
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("target" = total_emissions)
View(bau)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("bau" = total_emissions)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
inner_join(bau, targets)
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("bau" = total_emissions)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
targets_and_bau <- inner_join(bau, targets)
View(targets_and_bau)
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("bau" = total_emissions)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
targets_and_bau <- inner_join(bau, targets)
View(targets_and_bau)
.target_file = targets_and_bau
.target = "central"
.target_file <- .target_file %>%
select(year, .target)
.target = "target_central"
.target_file <- .target_file %>%
select(year, .target)
View(.target_file)
.target_file <- .target_file %>%
select(year, .target) %>%
rename("value" = .target)
View(.target_file)
.target <- .target_file %>%
select(year, .target_scenario) %>%
rename("value" = .target_scenario)
.target_file = targets_and_bau
.target_scenario = "target_central"
.target <- .target_file %>%
select(year, .target_scenario) %>%
rename("value" = .target_scenario)
targets_and_bau <- inner_join(bau, targets) %>%
pivot_longer(data = (2:5),
names_to = "target_type",
values_to = "value")
?pivot_longer
targets_and_bau <- inner_join(bau, targets) %>%
pivot_longer(cols = (2:5),
names_to = "target_type",
values_to = "value")
View(targets_and_bau)
.target <- .target_file %>%
filter(target_type == .target_scenario)
.target_file = targets_and_bau
.target <- .target_file %>%
filter(target_type == .target_scenario)
View(.target)
energy_intensity <- read_xlsx("data/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names()
energy_intensity <- read_xlsx("data-raw/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names()
View(energy_intensity)
View(energy_consumption)
#km travelled
km_travelled <- read_rds("data-raw/model-inputs/km_traveled.rds")
use_this::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
internal = FALSE)
library(usethis)
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
internal = FALSE)
rm(ls=list())
rm(list = ls())
load_all()
km_travelled
compliance_costs()
fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-10.rds")
compliance_costs()
targets_and_bau
fleet
check()
check()
test_costs <- cost_curves %>%
filter(year == 2023)
test_fleets <- fleet %>%
filter(year == 2023)
select_upgrade(.this_year_fleet = test_fleets,
.this_year_curves = test_costs)
compliance_costs(.fleet = fleet)
test_costs <- cost_curves %>%
filter(year == 2021)
test_fleets <- fleet %>%
filter(year == 2021)
select_upgrade(.this_year_fleet = test_fleets,
.this_year_curves = test_costs)
compliance_costs(.fleet = fleet)
?pull
.this_car_curves %>% pull(dollar_per_gram_reduced)
.this_car_curves %>% pull(dollar_per_gram_reduced) > .best_incr_cost
.this_car_curves$dollar_per_gram_reduced[1] <= .best_incr_cost
compliance_costs(.fleet = fleet)
#FOR THE MOMENT, TO CHANGE
fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-100.rds")
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE)
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
load_all()
compliance_costs()
select_upgrade(.this_year_fleet = test_fleets,
.this_year_curves = test_costs)
load_all()
compliance_costs()
load_all()
compliance_costs()
load_all()
compliance_costs()
load_all()
compliance_costs()
load_all()
compliance_costs()
load_all()
compliance_costs()
.this_car_curves %>% view()
.this_year_curves
View(cost_curves)
load_all()
compliance_costs()
#script to import all required data for model
library(readr)
library(readxl)
#data for the cost model
cost_curves <- read_rds("data-raw/cost-curves/cost_curves.rds")
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("bau" = total_emissions)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
targets_and_bau <- inner_join(bau, targets) %>%
pivot_longer(cols = (2:5),
names_to = "target_type",
values_to = "value")
#now data for the benefit model
#fuel and electricity prices
fuel_prices <- read_rds("data-raw/model-inputs/fuel-forecasts.rds")
electricity_prices <- read_rds("data-raw/model-inputs/energy_price_forecast.rds")
#energ intensity of ev's and the grid
energy_consumption <- read_rds("data-raw/model-inputs/ev_energy_consumption.rds")
energy_intensity <- read_xlsx("data-raw/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names()
#km travelled
km_travelled <- read_rds("data-raw/model-inputs/km_traveled.rds")
#FOR THE MOMENT, TO CHANGE
fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-100.rds")
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
compliance_costs()
load_all()
compliance_costs()
View(cost_curves)
#data for the cost model
cost_curves <- read_rds("data-raw/cost-curves/cost_curves.rds")
View(cost_curves)
#script to import all required data for model
library(readr)
library(readxl)
#data for the cost model
cost_curves <- read_rds("data-raw/cost-curves/cost_curves.rds")
#the targets and bau file
bau <- read_rds("data-raw/bau_scenarios/bau_emissions_trajectory.rds") %>%
filter(scenario == "slow") %>%
select(year, total_emissions) %>%
rename("bau" = total_emissions)
targets <- read_xlsx("data-raw/model-inputs/targets.xlsx")
targets_and_bau <- inner_join(bau, targets) %>%
pivot_longer(cols = (2:5),
names_to = "target_type",
values_to = "value")
#now data for the benefit model
#fuel and electricity prices
fuel_prices <- read_rds("data-raw/model-inputs/fuel-forecasts.rds")
electricity_prices <- read_rds("data-raw/model-inputs/energy_price_forecast.rds")
#energ intensity of ev's and the grid
energy_consumption <- read_rds("data-raw/model-inputs/ev_energy_consumption.rds")
energy_intensity <- read_xlsx("data-raw/AEMO/emissions-intensity-grid.xlsx",
sheet = "step_change") %>%
clean_names()
#km travelled
km_travelled <- read_rds("data-raw/model-inputs/km_traveled.rds")
#FOR THE MOMENT, TO CHANGE
fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-100.rds")
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
load_all()
compliance_costs()
load_all()
complaince_costs()
compliance_costs()
load_all()
compliance_costs()
check()
check()
document()
check()
document()
check()
check()
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = TRUE,
overwrite = TRUE)
check()
usethis::use_data(test_cc, test_fleet, internal = TRUE)
test_that("Compliance cost function doesn't return an error", {
expect_message(compliance_costs()
})
expect_message(compliance_costs())
test_that("Compliance cost function doesn't return an error", {
expect_message(compliance_costs(.run_to_year = 2022))
})
#importing dummy data for tests, generated in the R script "test_data_upgrade_selector.R"
test_that("Compliance cost function doesn't return an error", {
expect_message(compliance_costs(.run_to_year = 2023))
})
check()
usethis::use_data(
cost_curves,
targets_and_bau,
fuel_prices,
electricity_prices,
energy_consumption,
energy_intensity,
km_travelled,
fleet,
internal = FALSE,
overwrite = TRUE)
usethis::use_data(test_cc, test_fleet, internal = TRUE, overwrite = TRUE)
#dummy data for tests
# Data for testing upgrade_selector -----------------------
test_cc <- read_rds("data-raw/cost-curves/cost_curves.rds")
test_fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-10.rds")
test_cc <- test_cc %>%
#pick a somewhat random year
filter(year == 2023,
estimate == "icct_estimate")
test_fleet <- test_fleet %>%
#again choosing 2023
filter(year == 2023)
#now we're going to make some random changes to our test fleet dummy data,
#so that we have a situation we want to test
#making some vehicles electric (one passenger and an lcv)
test_fleet$electric_applied[1] <- TRUE
test_fleet$current_emissions[1] <- 0
test_fleet$tech_pkg_applied[1] <- 100
test_fleet$electric_applied[8] <- TRUE
test_fleet$current_emissions[8] <- 0
test_fleet$tech_pkg_applied[8] <- 100
test_fleet$electric_applied[5] <- TRUE
test_fleet$current_emissions[5] <- 0
test_fleet$tech_pkg_applied[5] <- 100
#making some vehicles have some tech package upgrades (we're just using made
#up values for how much the tech package reduces emissions, and the costs don't matter
#for this)
test_fleet$tech_pkg_applied[2] <- 4
test_fleet$current_emissions[2] <- 80
test_fleet$tech_pkg_applied[4] <- 6
test_fleet$current_emissions[4] <- 40
test_fleet$tech_pkg_applied[6] <- 4
test_fleet$current_emissions[6] <- 80
test_fleet$tech_pkg_applied[7] <- 4
test_fleet$current_emissions[7] <- 80
test_fleet$tech_pkg_applied[9] <- 5
test_fleet$current_emissions[9] <- 80
#what we're left with is a scenario where it is clear that the upgrade is going to be
#applied to the passenger vehicle with a tech pkg of 0. The test will ensure that is the
#case
usethis::use_data(test_cc, test_fleet, internal = TRUE, overwrite = TRUE)
check()
test_that("Upgrade selector selects the most cost effective upgrade from dummy data", {
expect_equal(
#Using the dummy data we've imported above, we expect the result of the test
#to say that the vehicle with ID 3 is the vehicle that the upgrade should be
#applied to (as we created the dummy data to show this)
select_upgrade(.this_year_fleet = test_fleet,
.this_year_curves = test_cc) %>%
ungroup() %>%
select(id),
test_fleet %>%
filter(id == 3) %>%
select(id))
})
select_upgrade(.this_year_fleet = test_fleet,
.this_year_curves = test_cc)
compliance_costs()
select_upgrade(.this_year_fleet = test_fleet,
.this_year_curves = test_cc)
#dummy data for tests
# Data for testing upgrade_selector -----------------------
test_cc <- read_rds("data-raw/cost-curves/cost_curves.rds")
test_fleet <- read_rds("data-raw/model-inputs/projected_fleet_in-10.rds")
test_cc <- test_cc %>%
#pick a somewhat random year
filter(year == 2023,
estimate == "central")
test_fleet <- test_fleet %>%
#again choosing 2023
filter(year == 2023)
#now we're going to make some random changes to our test fleet dummy data,
#so that we have a situation we want to test
#making some vehicles electric (one passenger and an lcv)
test_fleet$electric_applied[1] <- TRUE
test_fleet$current_emissions[1] <- 0
test_fleet$tech_pkg_applied[1] <- 100
test_fleet$electric_applied[8] <- TRUE
test_fleet$current_emissions[8] <- 0
test_fleet$tech_pkg_applied[8] <- 100
test_fleet$electric_applied[5] <- TRUE
test_fleet$current_emissions[5] <- 0
test_fleet$tech_pkg_applied[5] <- 100
#making some vehicles have some tech package upgrades (we're just using made
#up values for how much the tech package reduces emissions, and the costs don't matter
#for this)
test_fleet$tech_pkg_applied[2] <- 4
test_fleet$current_emissions[2] <- 80
test_fleet$tech_pkg_applied[4] <- 6
test_fleet$current_emissions[4] <- 40
test_fleet$tech_pkg_applied[6] <- 4
test_fleet$current_emissions[6] <- 80
test_fleet$tech_pkg_applied[7] <- 4
test_fleet$current_emissions[7] <- 80
test_fleet$tech_pkg_applied[9] <- 5
test_fleet$current_emissions[9] <- 80
#what we're left with is a scenario where it is clear that the upgrade is going to be
#applied to the passenger vehicle with a tech pkg of 0. The test will ensure that is the
#case
usethis::use_data(test_cc, test_fleet, internal = TRUE, overwrite = TRUE)
check()
cost_curves
electricity_prices
summary(electricity_prices)
head(electricity_prices)
energy_consumption
energy_intensity
fleet
check()
fuel_prices
km_travelled
target_a
targets_and_bau
check()
check()
check()
check()
View(fleet)
mean(fleet$base_emissions)
message(teal$bold("Moving to next year"))
message(purple$bold("Moving to next year"))
message(orange$bold("Moving to next year"))
library(crayon)
message(orange$bold("Moving to next year"))
?crayon
message(cyan$bold("Moving to next year"))
message(blue$bold(.year, "average emission value is ", mean(.this_year_fleet$current_emissions)))
message(blue$bold(.year, "average cost increase was $", round(mean(.this_year_fleet$cost), digits = 2)))
message(blue$bold(.year, "average cost increase was $"))
compliance_costs()
load_all()
compliance_costs()
message(blue$bold(.year, "average emission value is ", round(mean(.this_year_fleet$current_emissions), digits = 2))
message(blue$bold(.year, "average cost increase was $", round(mean(.this_year_fleet$cost), digits = 2)))
message(cyan$bold("Moving to next year"))
.year <- .year + 1
fleet_out <- bind_rows(fleet_out, .this_year_fleet)
}
return(fleet_out)
}
load_all()
compliance_costs()
load_all()
compliance_costs()
check()
